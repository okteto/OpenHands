diff --git a/frontend/postcss.config-okteto-subst.js b/frontend/postcss.config-okteto-subst.js
new file mode 100644
index 000000000..eb4c568a5
--- /dev/null
+++ b/frontend/postcss.config-okteto-subst.js
@@ -0,0 +1,6 @@
+export default {
+  plugins: {
+    tailwindcss: { config: './tailwind.config-okteto.js' },
+    autoprefixer: {},
+  },
+}
diff --git a/frontend/postcss.config.js b/frontend/postcss.config.js
index 2e7af2b7f..a0a190fdf 100644
--- a/frontend/postcss.config.js
+++ b/frontend/postcss.config.js
@@ -1,6 +1,6 @@
 export default {
   plugins: {
-    tailwindcss: {},
+    tailwindcss: { config: './tailwind.config.js' },
     autoprefixer: {},
   },
 }
diff --git a/frontend/src/components/features/chat/chat-interface-okteto.tsx b/frontend/src/components/features/chat/chat-interface-okteto.tsx
new file mode 100644
index 000000000..9691a5c6c
--- /dev/null
+++ b/frontend/src/components/features/chat/chat-interface-okteto.tsx
@@ -0,0 +1,142 @@
+import { useDispatch, useSelector } from "react-redux";
+import React from "react";
+import posthog from "posthog-js";
+import { convertImageToBase64 } from "#/utils/convert-image-to-base-64";
+import { createChatMessage } from "#/services/chat-service";
+import { InteractiveChatBox } from "./interactive-chat-box-okteto";
+import { addUserMessage } from "#/state/chat-slice";
+import { RootState } from "#/store";
+import { AgentState } from "#/types/agent-state";
+import { generateAgentStateChangeEvent } from "#/services/agent-state-service";
+import { useScrollToBottom } from "#/hooks/use-scroll-to-bottom";
+import { TypingIndicator } from "./typing-indicator";
+import { useWsClient } from "#/context/ws-client-provider";
+import { Messages } from "./messages";
+import { ChatSuggestionsOkteto } from "./chat-suggestions-okteto";
+import { ActionSuggestions } from "./action-suggestions";
+import { ScrollToBottomButton } from "#/components/shared/buttons/scroll-to-bottom-button";
+import { LoadingSpinner } from "#/components/shared/loading-spinner";
+
+function getEntryPoint(
+  hasRepository: boolean | null,
+  hasImportedProjectZip: boolean | null,
+): string {
+  if (hasRepository) return "github";
+  if (hasImportedProjectZip) return "zip";
+  return "direct";
+}
+
+export function ChatInterfaceOkteto() {
+  const { send, isLoadingMessages } = useWsClient();
+  const dispatch = useDispatch();
+  const scrollRef = React.useRef<HTMLDivElement>(null);
+  const { scrollDomToBottom, onChatBodyScroll, hitBottom } =
+    useScrollToBottom(scrollRef);
+
+  const { messages } = useSelector((state: RootState) => state.chat);
+  const { curAgentState } = useSelector((state: RootState) => state.agent);
+  const [messageToSend, setMessageToSend] = React.useState<string | null>(null);
+  const { selectedRepository, importedProjectZip } = useSelector(
+    (state: RootState) => state.initialQuery,
+  );
+
+  const handleSendMessage = async (content: string, files: File[]) => {
+    if (messages.length === 0) {
+      posthog.capture("initial_query_submitted", {
+        entry_point: getEntryPoint(
+          selectedRepository !== null,
+          importedProjectZip !== null,
+        ),
+        query_character_length: content.length,
+        uploaded_zip_size: importedProjectZip?.length,
+      });
+    } else {
+      posthog.capture("user_message_sent", {
+        session_message_count: messages.length,
+        current_message_length: content.length,
+      });
+    }
+    const promises = files.map((file) => convertImageToBase64(file));
+    const imageUrls = await Promise.all(promises);
+
+    const timestamp = new Date().toISOString();
+    const pending = true;
+    dispatch(addUserMessage({ content, imageUrls, timestamp, pending }));
+    send(createChatMessage(content, imageUrls, timestamp));
+    setMessageToSend(null);
+  };
+
+  const handleStop = () => {
+    posthog.capture("stop_button_clicked");
+    send(generateAgentStateChangeEvent(AgentState.STOPPED));
+  };
+
+  const isWaitingForUserInput =
+    curAgentState === AgentState.AWAITING_USER_INPUT ||
+    curAgentState === AgentState.FINISHED;
+
+  return (
+    <div className="h-full flex flex-col justify-between">
+      {messages.length === 0 && (
+        <ChatSuggestionsOkteto onSuggestionsClick={setMessageToSend} />
+      )}
+
+      <div
+        ref={scrollRef}
+        onScroll={(e) => onChatBodyScroll(e.currentTarget)}
+        className="flex flex-col grow overflow-y-auto overflow-x-hidden px-4 pt-4 gap-2"
+      >
+        {isLoadingMessages && (
+          <div className="flex justify-center">
+            <LoadingSpinner size="small" />
+          </div>
+        )}
+
+        {!isLoadingMessages && (
+          <Messages
+            messages={messages}
+            isAwaitingUserConfirmation={
+              curAgentState === AgentState.AWAITING_USER_CONFIRMATION
+            }
+          />
+        )}
+
+        {isWaitingForUserInput && (
+          <div className="okteto-action-suggestions">
+            <ActionSuggestions
+              onSuggestionsClick={(value) => handleSendMessage(value, [])}
+            />
+          </div>
+        )}
+      </div>
+
+      <div className="flex flex-col gap-[6px] px-4 pb-4">
+        <div className="flex justify-between relative">
+          <div className="absolute left-1/2 transform -translate-x-1/2 bottom-0">
+            {curAgentState === AgentState.RUNNING && <TypingIndicator />}
+          </div>
+
+          {!hitBottom && <ScrollToBottomButton onClick={scrollDomToBottom} />}
+        </div>
+
+        <InteractiveChatBox
+          onSubmit={handleSendMessage}
+          onStop={handleStop}
+          isDisabled={
+            curAgentState === AgentState.LOADING ||
+            curAgentState === AgentState.AWAITING_USER_CONFIRMATION
+          }
+          mode={curAgentState === AgentState.RUNNING ? "stop" : "submit"}
+          value={messageToSend ?? undefined}
+          onChange={setMessageToSend}
+        />
+      </div>
+
+      {/* <FeedbackModal
+        isOpen={feedbackModalIsOpen}
+        onClose={() => setFeedbackModalIsOpen(false)}
+        polarity={feedbackPolarity}
+      /> */}
+    </div>
+  );
+}
diff --git a/frontend/src/components/features/chat/chat-suggestions-okteto.tsx b/frontend/src/components/features/chat/chat-suggestions-okteto.tsx
new file mode 100644
index 000000000..9be00d653
--- /dev/null
+++ b/frontend/src/components/features/chat/chat-suggestions-okteto.tsx
@@ -0,0 +1,24 @@
+import { SuggestionsOkteto } from "#/components/features/suggestions/suggestions-okteto";
+import { SUGGESTIONS } from "#/utils/suggestions";
+
+interface ChatSuggestionsProps {
+  onSuggestionsClick: (value: string) => void;
+}
+
+export function ChatSuggestionsOkteto({
+  onSuggestionsClick,
+}: ChatSuggestionsProps) {
+  return (
+    <div className="flex flex-col h-full px-4 items-center justify-center">
+      <SuggestionsOkteto
+        suggestions={Object.entries(SUGGESTIONS.repo)
+          .slice(0, 4)
+          .map(([label, value]) => ({
+            label,
+            value,
+          }))}
+        onSuggestionClick={onSuggestionsClick}
+      />
+    </div>
+  );
+}
diff --git a/frontend/src/components/features/chat/interactive-chat-box-okteto.tsx b/frontend/src/components/features/chat/interactive-chat-box-okteto.tsx
new file mode 100644
index 000000000..e635447cf
--- /dev/null
+++ b/frontend/src/components/features/chat/interactive-chat-box-okteto.tsx
@@ -0,0 +1,82 @@
+import React from "react";
+import { ChatInput } from "./chat-input";
+import { cn } from "#/utils/utils";
+import { ImageCarousel } from "../images/image-carousel";
+import { UploadImageInput } from "../images/upload-image-input";
+
+interface InteractiveChatBoxProps {
+  isDisabled?: boolean;
+  mode?: "stop" | "submit";
+  onSubmit: (message: string, images: File[]) => void;
+  onStop: () => void;
+  value?: string;
+  onChange?: (message: string) => void;
+}
+
+export function InteractiveChatBox({
+  isDisabled,
+  mode = "submit",
+  onSubmit,
+  onStop,
+  value,
+  onChange,
+}: InteractiveChatBoxProps) {
+  const [images, setImages] = React.useState<File[]>([]);
+
+  const handleUpload = (files: File[]) => {
+    setImages((prevImages) => [...prevImages, ...files]);
+  };
+
+  const handleRemoveImage = (index: number) => {
+    setImages((prevImages) => {
+      const newImages = [...prevImages];
+      newImages.splice(index, 1);
+      return newImages;
+    });
+  };
+
+  const handleSubmit = (message: string) => {
+    onSubmit(message, images);
+    setImages([]);
+    if (message) {
+      onChange?.("");
+    }
+  };
+
+  return (
+    <div
+      data-testid="interactive-chat-box"
+      className="flex flex-col gap-[10px]"
+    >
+      {images.length > 0 && (
+        <ImageCarousel
+          size="small"
+          images={images.map((image) => URL.createObjectURL(image))}
+          onRemove={handleRemoveImage}
+        />
+      )}
+
+      <div
+        className={cn(
+          "flex items-end gap-1",
+          "bg-secondary border border-neutral-600 rounded-lg px-2",
+          "transition-colors duration-200",
+          "hover:border-neutral-500 focus-within:border-neutral-500",
+        )}
+      >
+        <UploadImageInput onUpload={handleUpload} />
+        <ChatInput
+          disabled={isDisabled}
+          button={mode}
+          onChange={onChange}
+          onSubmit={handleSubmit}
+          onStop={onStop}
+          value={value}
+          onImagePaste={handleUpload}
+          className="py-[10px]"
+          buttonClassName="py-[10px]"
+        />
+      </div>
+    </div>
+  );
+}
diff --git a/frontend/src/components/features/controls/controls-okteto.tsx b/frontend/src/components/features/controls/controls-okteto.tsx
new file mode 100644
index 000000000..ce81259ca
--- /dev/null
+++ b/frontend/src/components/features/controls/controls-okteto.tsx
@@ -0,0 +1,27 @@
+import React from "react";
+import { AgentControlBar } from "./agent-control-bar";
+import { AgentStatusBar } from "./agent-status-bar";
+import { SecurityLock } from "./security-lock";
+
+interface ControlsProps {
+  setSecurityOpen: (isOpen: boolean) => void;
+  showSecurityLock: boolean;
+}
+
+export function ControlsOkteto({
+  setSecurityOpen,
+  showSecurityLock,
+}: ControlsProps) {
+  return (
+    <div className="flex items-center justify-between p-4 border-t-1 border-neutral-1000">
+      <div className="flex items-center gap-2">
+        <AgentControlBar />
+        <AgentStatusBar />
+
+        {showSecurityLock && (
+          <SecurityLock onClick={() => setSecurityOpen(true)} />
+        )}
+      </div>
+    </div>
+  );
+}
diff --git a/frontend/src/components/features/suggestions/suggestion-item-okteto.tsx b/frontend/src/components/features/suggestions/suggestion-item-okteto.tsx
new file mode 100644
index 000000000..5339d1e3a
--- /dev/null
+++ b/frontend/src/components/features/suggestions/suggestion-item-okteto.tsx
@@ -0,0 +1,25 @@
+import { useTranslation } from "react-i18next";
+import { I18nKey } from "#/i18n/declaration";
+
+export type Suggestion = { label: I18nKey | string; value: string };
+
+interface SuggestionItemProps {
+  suggestion: Suggestion;
+  onClick: (value: string) => void;
+}
+
+export function SuggestionItem({ suggestion, onClick }: SuggestionItemProps) {
+  const { t } = useTranslation();
+  return (
+    <li className="list-none bg-neutral-600 border border-neutral-600 rounded-xl hover:bg-tertiary flex-1">
+      <button
+        type="button"
+        data-testid="suggestion"
+        onClick={() => onClick(suggestion.value)}
+        className="text-[16px] leading-6 -tracking-[0.01em] text-center w-full p-3 font-semibold"
+      >
+        {t(suggestion.label)}
+      </button>
+    </li>
+  );
+}
diff --git a/frontend/src/components/features/suggestions/suggestions-okteto.tsx b/frontend/src/components/features/suggestions/suggestions-okteto.tsx
new file mode 100644
index 000000000..bd528a326
--- /dev/null
+++ b/frontend/src/components/features/suggestions/suggestions-okteto.tsx
@@ -0,0 +1,26 @@
+import { SuggestionItem, type Suggestion } from "./suggestion-item";
+
+interface SuggestionsProps {
+  suggestions: Suggestion[];
+  onSuggestionClick: (value: string) => void;
+}
+
+export function SuggestionsOkteto({
+  suggestions,
+  onSuggestionClick,
+}: SuggestionsProps) {
+  return (
+    <ul
+      data-testid="suggestions"
+      className="okteto-suggestions flex flex-col gap-4 w-full max-w-md"
+    >
+      {suggestions.map((suggestion, index) => (
+        <SuggestionItem
+          key={index}
+          suggestion={suggestion}
+          onClick={onSuggestionClick}
+        />
+      ))}
+    </ul>
+  );
+}
diff --git a/frontend/src/entry.client-okteto-subst.tsx b/frontend/src/entry.client-okteto-subst.tsx
new file mode 100644
index 000000000..b0e6074d0
--- /dev/null
+++ b/frontend/src/entry.client-okteto-subst.tsx
@@ -0,0 +1,51 @@
+/* eslint-disable react/react-in-jsx-scope */
+/**
+ * By default, Remix will handle hydrating your app on the client for you.
+ * You are free to delete this file if you'd like to, but if you ever want it revealed again, you can run `npx remix reveal` ✨
+ * For more information, see https://remix.run/file-conventions/entry.client
+ */
+
+import { HydratedRouter } from "react-router/dom";
+import React, { startTransition, StrictMode } from "react";
+import { hydrateRoot } from "react-dom/client";
+import { Provider } from "react-redux";
+import "./i18n";
+import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
+import store from "./store";
+import { AuthProvider } from "./context/auth-context";
+import { queryClientConfig } from "./query-client-config";
+import { SettingsProvider } from "./context/settings-context";
+
+async function prepareApp() {
+  if (
+    process.env.NODE_ENV === "development" &&
+    import.meta.env.VITE_MOCK_API === "true"
+  ) {
+    const { worker } = await import("./mocks/browser");
+
+    await worker.start({
+      onUnhandledRequest: "bypass",
+    });
+  }
+}
+
+export const queryClient = new QueryClient(queryClientConfig);
+
+prepareApp().then(() =>
+  startTransition(() => {
+    hydrateRoot(
+      document,
+      <StrictMode>
+        <Provider store={store}>
+          <AuthProvider>
+            <QueryClientProvider client={queryClient}>
+              <SettingsProvider>
+                <HydratedRouter />
+              </SettingsProvider>
+            </QueryClientProvider>
+          </AuthProvider>
+        </Provider>
+      </StrictMode>,
+    );
+  }),
+);
diff --git a/frontend/src/index-okteto.css b/frontend/src/index-okteto.css
new file mode 100644
index 000000000..677841571
--- /dev/null
+++ b/frontend/src/index-okteto.css
@@ -0,0 +1,59 @@
+:root {
+  --navy-extra-light: #9aa9cd;
+  --navy-light: #808ca9;
+  --navy-lighter: #475060;
+  --navy-a-bit-lighter: #374153;
+  --navy: #232935;
+  --navy-dark: #1e222b;
+  --navy-extra-dark: #181b22;
+  --navy-extra-extra-dark: #111318;
+  --green: #00d1ca;
+  --red: #f6323a;
+  --blue: #4a90e2;
+  --white: #ffffff;
+}
+
+body {
+  margin: 0;
+  font-family:
+    -apple-system, "SF Pro", BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen",
+    "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue",
+    sans-serif;
+  -webkit-font-smoothing: antialiased;
+  -moz-osx-font-smoothing: grayscale;
+}
+
+code {
+  font-family:
+    source-code-pro, Menlo, Monaco, Consolas, "Courier New", monospace;
+}
+
+.markdown-body code {
+  padding: 0.2em 0.4em;
+  margin: 0;
+  font-size: 85%;
+  white-space: break-spaces;
+  background-color: #2a3038;
+  border-radius: 4px;
+  color: #e6edf3;
+  border: 1px solid #30363d;
+  letter-spacing: -0.2px;
+}
+
+.markdown-body pre code {
+  padding: 0;
+  background-color: inherit;
+}
+
+.markdown-body {
+  white-space: pre-wrap; /* Handles line breaks */
+}
+
+.markdown-body th {
+  text-align: left;
+}
+
+.markdown-body th,
+.markdown-body td {
+  padding: 0.1rem 1rem;
+}
diff --git a/frontend/src/root-okteto-subst.tsx b/frontend/src/root-okteto-subst.tsx
new file mode 100644
index 000000000..82be41504
--- /dev/null
+++ b/frontend/src/root-okteto-subst.tsx
@@ -0,0 +1,40 @@
+import {
+  Links,
+  Meta,
+  MetaFunction,
+  Outlet,
+  Scripts,
+  ScrollRestoration,
+} from "react-router";
+import "./tailwind.css";
+import "./index-okteto.css";
+import React from "react";
+import { Toaster } from "react-hot-toast";
+
+export function Layout({ children }: { children: React.ReactNode }) {
+  return (
+    <html lang="en">
+      <head>
+        <meta charSet="utf-8" />
+        <meta name="viewport" content="width=device-width, initial-scale=1" />
+        <Meta />
+        <Links />
+      </head>
+      <body>
+        {children}
+        <ScrollRestoration />
+        <Scripts />
+        <Toaster />
+      </body>
+    </html>
+  );
+}
+
+export const meta: MetaFunction = () => [
+  { title: "OpenHands" },
+  { name: "description", content: "Let's Start Building!" },
+];
+
+export default function App() {
+  return <Outlet />;
+}
diff --git a/frontend/src/routes-okteto-subst.ts b/frontend/src/routes-okteto-subst.ts
new file mode 100644
index 000000000..5e3dfe948
--- /dev/null
+++ b/frontend/src/routes-okteto-subst.ts
@@ -0,0 +1,25 @@
+import {
+  type RouteConfig,
+  layout,
+  index,
+  route,
+} from "@react-router/dev/routes";
+
+export default [
+  // layout("routes/_oh/route.tsx", [
+  layout("routes/_oh/route-okteto.tsx", [
+    // index("routes/_oh._index/route.tsx"),
+    index("routes/_oh._index/route-okteto.tsx"),
+    route("settings", "routes/settings.tsx", [
+      index("routes/account-settings.tsx"),
+      route("billing", "routes/billing.tsx"),
+    ]),
+    // route("conversations/:conversationId", "routes/_oh.app/route.tsx", [
+    route("conversations/:conversationId", "routes/_oh.app/route-okteto.tsx", [
+      // index("routes/_oh.app._index/route.tsx"),
+      // route("browser", "routes/_oh.app.browser.tsx"),
+      // route("jupyter", "routes/_oh.app.jupyter.tsx"),
+      // route("served", "routes/app.tsx"),
+    ]),
+  ]),
+] satisfies RouteConfig;
diff --git a/frontend/src/routes/_oh._index/route-okteto.tsx b/frontend/src/routes/_oh._index/route-okteto.tsx
new file mode 100644
index 000000000..251a621ad
--- /dev/null
+++ b/frontend/src/routes/_oh._index/route-okteto.tsx
@@ -0,0 +1,19 @@
+import React from "react";
+
+import { TaskForm } from "#/components/shared/task-form";
+
+function Home() {
+  const formRef = React.useRef<HTMLFormElement>(null);
+
+  return (
+    <div className="bg-base-secondary h-full rounded-xl flex flex-col items-center justify-center relative overflow-y-auto px-2">
+      <div className="flex flex-col gap-8 w-full md:w-[600px] items-center">
+        <div className="flex flex-col gap-2 w-full">
+          <TaskForm ref={formRef} />
+        </div>
+      </div>
+    </div>
+  );
+}
+
+export default Home;
diff --git a/frontend/src/routes/_oh.app/route-okteto.tsx b/frontend/src/routes/_oh.app/route-okteto.tsx
new file mode 100644
index 000000000..37b475e2c
--- /dev/null
+++ b/frontend/src/routes/_oh.app/route-okteto.tsx
@@ -0,0 +1,113 @@
+import { useDisclosure } from "@heroui/react";
+import React from "react";
+import { useDispatch, useSelector } from "react-redux";
+import toast from "react-hot-toast";
+import {
+  ConversationProvider,
+  useConversation,
+} from "#/context/conversation-context";
+import { ControlsOkteto } from "#/components/features/controls/controls-okteto";
+import { clearMessages, addUserMessage } from "#/state/chat-slice";
+import { clearTerminal } from "#/state/command-slice";
+import { useEffectOnce } from "#/hooks/use-effect-once";
+import { clearJupyter } from "#/state/jupyter-slice";
+import { ChatInterfaceOkteto } from "../../components/features/chat/chat-interface-okteto";
+import { WsClientProvider } from "#/context/ws-client-provider";
+import { EventHandler } from "./event-handler";
+import { useConversationConfig } from "#/hooks/query/use-conversation-config";
+import Security from "#/components/shared/modals/security/security";
+import { useEndSession } from "#/hooks/use-end-session";
+import { useUserConversation } from "#/hooks/query/use-user-conversation";
+import { useSettings } from "#/hooks/query/use-settings";
+import { clearFiles, clearInitialPrompt } from "#/state/initial-query-slice";
+import { RootState } from "#/store";
+
+function AppContent() {
+  useConversationConfig();
+  const { data: settings } = useSettings();
+  const { conversationId } = useConversation();
+  const { data: conversation, isFetched } = useUserConversation(
+    conversationId || null,
+  );
+  const { initialPrompt, files } = useSelector(
+    (state: RootState) => state.initialQuery,
+  );
+  const dispatch = useDispatch();
+  const endSession = useEndSession();
+
+  React.useEffect(() => {
+    if (isFetched && !conversation) {
+      toast.error(
+        "This conversation does not exist, or you do not have permission to access it.",
+      );
+      endSession();
+    }
+  }, [conversation, isFetched]);
+
+  React.useEffect(() => {
+    dispatch(clearMessages());
+    dispatch(clearTerminal());
+    dispatch(clearJupyter());
+    if (conversationId && (initialPrompt || files.length > 0)) {
+      dispatch(
+        addUserMessage({
+          content: initialPrompt || "",
+          imageUrls: files || [],
+          timestamp: new Date().toISOString(),
+          pending: true,
+        }),
+      );
+      dispatch(clearInitialPrompt());
+      dispatch(clearFiles());
+    }
+  }, [conversationId]);
+
+  useEffectOnce(() => {
+    dispatch(clearMessages());
+    dispatch(clearTerminal());
+    dispatch(clearJupyter());
+  });
+
+  const {
+    isOpen: securityModalIsOpen,
+    onOpen: onSecurityModalOpen,
+    onOpenChange: onSecurityModalOpenChange,
+  } = useDisclosure();
+
+  return (
+    <WsClientProvider conversationId={conversationId}>
+      <EventHandler>
+        <div data-testid="app-route" className="flex flex-col h-full">
+          <div className="flex h-full">
+            <div className="w-full">
+              <ChatInterfaceOkteto />
+            </div>
+          </div>
+
+          <ControlsOkteto
+            setSecurityOpen={onSecurityModalOpen}
+            showSecurityLock={!!settings?.SECURITY_ANALYZER}
+          />
+
+          {settings && (
+            <Security
+              isOpen={securityModalIsOpen}
+              onOpenChange={onSecurityModalOpenChange}
+              securityAnalyzer={settings.SECURITY_ANALYZER}
+            />
+          )}
+        </div>
+      </EventHandler>
+    </WsClientProvider>
+  );
+}
+
+function App() {
+  return (
+    <ConversationProvider>
+      <AppContent />
+    </ConversationProvider>
+  );
+}
+
+export default App;
diff --git a/frontend/src/routes/_oh/route-okteto.tsx b/frontend/src/routes/_oh/route-okteto.tsx
new file mode 100644
index 000000000..3b1546833
--- /dev/null
+++ b/frontend/src/routes/_oh/route-okteto.tsx
@@ -0,0 +1,118 @@
+import React from "react";
+import { useRouteError, isRouteErrorResponse, Outlet } from "react-router";
+import i18n from "#/i18n";
+import { useGitHubAuthUrl } from "#/hooks/use-github-auth-url";
+import { useIsAuthed } from "#/hooks/query/use-is-authed";
+import { useConfig } from "#/hooks/query/use-config";
+import { WaitlistModal } from "#/components/features/waitlist/waitlist-modal";
+import { AnalyticsConsentFormModal } from "#/components/features/analytics/analytics-consent-form-modal";
+import { useSettings } from "#/hooks/query/use-settings";
+import { useAuth } from "#/context/auth-context";
+import { useMigrateUserConsent } from "#/hooks/use-migrate-user-consent";
+
+export function ErrorBoundary() {
+  const error = useRouteError();
+
+  if (isRouteErrorResponse(error)) {
+    return (
+      <div>
+        <h1>{error.status}</h1>
+        <p>{error.statusText}</p>
+        <pre>
+          {error.data instanceof Object
+            ? JSON.stringify(error.data)
+            : error.data}
+        </pre>
+      </div>
+    );
+  }
+  if (error instanceof Error) {
+    return (
+      <div>
+        <h1>Uh oh, an error occurred!</h1>
+        <pre>{error.message}</pre>
+      </div>
+    );
+  }
+
+  return (
+    <div>
+      <h1>Uh oh, an unknown error occurred!</h1>
+    </div>
+  );
+}
+
+export default function MainApp() {
+  const { githubTokenIsSet } = useAuth();
+  const { data: settings } = useSettings();
+  const { migrateUserConsent } = useMigrateUserConsent();
+
+  const [consentFormIsOpen, setConsentFormIsOpen] = React.useState(false);
+
+  const config = useConfig();
+  const {
+    data: isAuthed,
+    isFetching: isFetchingAuth,
+    isError: authError,
+  } = useIsAuthed();
+
+  const gitHubAuthUrl = useGitHubAuthUrl({
+    appMode: config.data?.APP_MODE || null,
+    gitHubClientId: config.data?.GITHUB_CLIENT_ID || null,
+  });
+
+  React.useEffect(() => {
+    if (settings?.LANGUAGE) {
+      i18n.changeLanguage(settings.LANGUAGE);
+    }
+  }, [settings?.LANGUAGE]);
+
+  React.useEffect(() => {
+    const consentFormModalIsOpen =
+      settings?.USER_CONSENTS_TO_ANALYTICS === null;
+
+    setConsentFormIsOpen(consentFormModalIsOpen);
+  }, [settings]);
+
+  React.useEffect(() => {
+    // Migrate user consent to the server if it was previously stored in localStorage
+    migrateUserConsent({
+      handleAnalyticsWasPresentInLocalStorage: () => {
+        setConsentFormIsOpen(false);
+      },
+    });
+  }, []);
+
+  const userIsAuthed = !!isAuthed && !authError;
+  const renderWaitlistModal =
+    !isFetchingAuth && !userIsAuthed && config.data?.APP_MODE === "saas";
+
+  return (
+    <div
+      data-testid="root-layout"
+      className="bg-base h-screen overflow-x-hidden flex flex-col md:flex-row gap-3"
+    >
+      <div
+        id="root-outlet"
+        className="h-[calc(100%-50px)] md:h-full w-full relative"
+      >
+        <Outlet />
+      </div>
+
+      {renderWaitlistModal && (
+        <WaitlistModal
+          ghTokenIsSet={githubTokenIsSet}
+          githubAuthUrl={gitHubAuthUrl}
+        />
+      )}
+
+      {config.data?.APP_MODE === "oss" && consentFormIsOpen && (
+        <AnalyticsConsentFormModal
+          onClose={() => {
+            setConsentFormIsOpen(false);
+          }}
+        />
+      )}
+    </div>
+  );
+}
diff --git a/frontend/tailwind.config-okteto.js b/frontend/tailwind.config-okteto.js
new file mode 100644
index 000000000..0e1775676
--- /dev/null
+++ b/frontend/tailwind.config-okteto.js
@@ -0,0 +1,99 @@
+/** @type {import('tailwindcss').Config} */
+import { heroui } from "@heroui/react";
+import typography from "@tailwindcss/typography";
+export default {
+  content: [
+    "./src/**/*.{js,ts,jsx,tsx}",
+    "./node_modules/@heroui/theme/dist/**/*.{js,ts,jsx,tsx}",
+  ],
+  theme: {
+    extend: {
+      colors: {
+        primary: "var(--green)",
+        secondary: "var(--navy)", 
+        base: "var(--navy)",
+        "base-secondary": "var(--navy)", // we keep it the same as base
+        danger: "var(--red)",
+        success: "var(--green)",
+        tertiary: "var(--navy-a-bit-lighter)", // used for inputs
+        "tertiary-light": "var(--navy-lighter)", // used for borders and placeholder text
+        content: "var(--white)", // used mostly for text
+
+        "neutral-1100": "var(--navy-extra-extra-dark)",
+        "neutral-1000": "var(--navy-extra-dark)",
+        "neutral-900": "var(--navy-dark)",
+        "neutral-800": "var(--navy-darker)",
+        "neutral-700": "var(--navy)",
+        "neutral-600": "var(--navy-a-bit-lighter)",
+        "neutral-500": "var(--navy-lighter)",
+        "neutral-400": "var(--navy-light)",
+        "neutral-300": "var(--navy-extra-light)",
+
+        "red-500": "var(--red)",
+      },
+      borderRadius: {
+        lg: "4px",
+        xl: "4px",
+      },
+    },
+    animation: {
+      enter: "toastIn 400ms cubic-bezier(0.21, 1.02, 0.73, 1)",
+      leave: "toastOut 100ms ease-in forwards",
+    },
+    keyframes: {
+      toastIn: {
+        "0%": {
+          opacity: "0",
+          transform: "translateY(-100%) scale(0.8)",
+        },
+        "80%": {
+          opacity: "1",
+          transform: "translateY(0) scale(1.02)",
+        },
+        "100%": {
+          opacity: "1",
+          transform: "translateY(0) scale(1)",
+        },
+      },
+      toastOut: {
+        "0%": {
+          opacity: "1",
+          transform: "translateY(0) scale(1)",
+        },
+        "100%": {
+          opacity: "0",
+          transform: "translateY(-100%) scale(0.9)",
+        },
+      },
+      colors: {
+        primary: "#C9B974", // nice yellow
+        base: "#171717", // dark background (neutral-900)
+        "base-secondary": "#262626", // lighter background (neutral-800); also used for tooltips
+        danger: "#E76A5E",
+        success: "#A5E75E",
+        tertiary: "#454545", // gray, used for inputs
+        "tertiary-light": "#B7BDC2", // lighter gray, used for borders and placeholder text
+      },
+    },
+  },
+  darkMode: "class",
+  plugins: [
+    heroui({
+      defaultTheme: "dark",
+      layout: {
+        radius: {
+          small: "5px",
+          large: "20px",
+        },
+      },
+      themes: {
+        dark: {
+          colors: {
+            primary: "#4465DB",
+          },
+        },
+      },
+    }),
+    typography,
+  ],
+};
